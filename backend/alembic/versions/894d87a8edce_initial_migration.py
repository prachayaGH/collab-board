"""initial migration

Revision ID: 894d87a8edce
Revises: 
Create Date: 2025-07-24 16:24:38.921500

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '894d87a8edce'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    # op.drop_table('users')
    op.drop_index(op.f('idx_direct_messages_created_at'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_receiver'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_sender'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_unread'), table_name='direct_messages')
    # op.drop_table('direct_messages')
    op.drop_index(op.f('idx_friendships_addressee'), table_name='friendships')
    op.drop_index(op.f('idx_friendships_requester'), table_name='friendships')
    op.drop_index(op.f('idx_friendships_status'), table_name='friendships')
    op.drop_table('friendships')
    op.drop_index(op.f('idx_notifications_created_at'), table_name='notifications')
    op.drop_index(op.f('idx_notifications_unread'), table_name='notifications')
    op.drop_index(op.f('idx_notifications_user'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('idx_user_status_user'), table_name='user_status')
    op.drop_table('user_status')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'offline'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['online'::character varying, 'offline'::character varying]::text[])", name=op.f('user_status_status_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_status_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_status_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_status_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_status_user'), 'user_status', ['user_id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('related_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('related_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['friend_request'::character varying, 'friend_accepted'::character varying, 'new_message'::character varying]::text[])", name=op.f('notifications_type_check')),
    sa.ForeignKeyConstraint(['related_message_id'], ['direct_messages.id'], name=op.f('notifications_related_message_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['related_user_id'], ['users.id'], name=op.f('notifications_related_user_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('idx_notifications_user'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('idx_notifications_unread'), 'notifications', ['user_id', 'is_read'], unique=False)
    op.create_index(op.f('idx_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_table('friendships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('requester_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('addressee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'declined'::character varying]::text[])", name=op.f('friendships_status_check')),
    sa.ForeignKeyConstraint(['addressee_id'], ['users.id'], name=op.f('friendships_addressee_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name=op.f('friendships_requester_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('friendships_pkey')),
    sa.UniqueConstraint('requester_id', 'addressee_id', name=op.f('friendships_requester_id_addressee_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_friendships_status'), 'friendships', ['status'], unique=False)
    op.create_index(op.f('idx_friendships_requester'), 'friendships', ['requester_id'], unique=False)
    op.create_index(op.f('idx_friendships_addressee'), 'friendships', ['addressee_id'], unique=False)
    op.create_table('direct_messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.id'], name=op.f('direct_messages_receiver_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('direct_messages_sender_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('direct_messages_pkey'))
    )
    op.create_index(op.f('idx_direct_messages_unread'), 'direct_messages', ['receiver_id', 'is_read'], unique=False)
    op.create_index(op.f('idx_direct_messages_sender'), 'direct_messages', ['sender_id'], unique=False)
    op.create_index(op.f('idx_direct_messages_receiver'), 'direct_messages', ['receiver_id'], unique=False)
    op.create_index(op.f('idx_direct_messages_created_at'), 'direct_messages', ['created_at'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('oauth_provider', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('oauth_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###
